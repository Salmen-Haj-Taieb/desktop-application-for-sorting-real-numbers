[
    {
        "label": "tkinter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter",
        "description": "tkinter",
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "ttk",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "triAlgs",
        "description": "triAlgs",
        "isExtraImport": true,
        "detail": "triAlgs",
        "documentation": {}
    },
    {
        "label": "le",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "Case",
        "kind": 6,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "class Case(tk.Frame):\n    nbremptycase=0\n    filledlist=[]\n    def __init__(self, parent,j):\n        tk.Frame.__init__(self, parent,bg=\"#ec0062\",borderwidth=1)\n        vcmd = (self.register(self.onValidate),'%P','%s')\n        self.option=tk.Frame(self,bg=\"#ec0062\")\n        self.deleten=tk.Button(self.option,width=24,height=18,image=deletenumberimage,\n        command=lambda : self.removenum(),cursor=\"hand2\")\n        self.deleteb=tk.Button(self.option,width=24,height=18,image=deleteboximage,",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "Newcase",
        "kind": 6,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "class Newcase(tk.Frame):\n    def __init__(self, parent,j):\n        tk.Frame.__init__(self, parent,borderwidth=1,width=1,height=25,bg=\"#3a8cff\",cursor=\"hand2\")\n        self.grid(row=j//20,column=j % 20,padx=3,pady=12)\n        self.id=j//2\n        self.bind(\"<Enter>\",self.displayaddbox)\n        self.bind(\"<Leave>\",self.hideaddbox)\n        self.bind(\"<Button-1>\", self.addbox)    \n    def addbox(self,s=0):\n        global cases",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "hideerrmsg",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def hideerrmsg():\n    errormsg.config(text=\"\")\"\"\"\ndef validatenumcase(S,P):\n    if S=='':\n        return True\n    try:\n        if len(P)==1 and S=='0':\n           int('a')\n        int(S)\n        errormsg.config(text=\"\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "validatenumcase",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def validatenumcase(S,P):\n    if S=='':\n        return True\n    try:\n        if len(P)==1 and S=='0':\n           int('a')\n        int(S)\n        errormsg.config(text=\"\")\n        return True\n    except ValueError:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "clearlist",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def clearlist():\n    global valueslist\n    global cases\n    cases=[]\n    #newcases=[]\n    valueslist=[]\n    nbrcase.config(state='normal')\n    nbrcase.delete(0,END)\n    restxt.pack_forget()\n    datatxt.pack_forget()",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "creatlist",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def creatlist(n):\n    global cases\n    global newcases\n    global valueslist\n    valueslist=[]\n    try:\n        n=int(n)\n        if(int(n)<=0):\n            errormsg.configure(text=\"Enter a positive number not null please\")\n        Case.nbremptycase=n",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "trielist",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def trielist():\n    global cases\n    global valueslist\n    valueslist=[]\n    i=0\n    for  case in cases:\n        valueslist.append(float(case.entry.get()))\n    if typetrie.get()==\"bulle\":\n        bulle(valueslist)\n    elif typetrie.get()==\"insertion\":",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "enterkey",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def enterkey():\n    try:\n        if creat['state']==tk.DISABLED:\n            print(5/0)\n        creatlist(nbrcase.get())\n    except ZeroDivisionError:\n        trielist()    \ndef clearkey():\n   clearlist()\ndef deletekey():",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "clearkey",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def clearkey():\n   clearlist()\ndef deletekey():\n   w=instractionfr.focus_get()\n   f=w.master\n   if f.master==data:\n       f.delete()\ndef removekey():\n   w=instractionfr.focus_get()\n   f=w.master",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "deletekey",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def deletekey():\n   w=instractionfr.focus_get()\n   f=w.master\n   if f.master==data:\n       f.delete()\ndef removekey():\n   w=instractionfr.focus_get()\n   f=w.master\n   if f.master==data:\n       f.removenum()",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "removekey",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def removekey():\n   w=instractionfr.focus_get()\n   f=w.master\n   if f.master==data:\n       f.removenum()\ndef addrightkey():\n    w=instractionfr.focus_get()\n    f=w.master\n    if f.master==data:\n       newcases[f.id].addbox(s=1)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "addrightkey",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def addrightkey():\n    w=instractionfr.focus_get()\n    f=w.master\n    if f.master==data:\n       newcases[f.id].addbox(s=1)\ndef addleftkey():\n    w=instractionfr.focus_get()\n    f=w.master\n    if f.master==data:\n       newcases[f.id].addbox(s=0)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "addleftkey",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def addleftkey():\n    w=instractionfr.focus_get()\n    f=w.master\n    if f.master==data:\n       newcases[f.id].addbox(s=0)\ndef displaycreatdesg(e):\n    buttondes.config(text=\"Create (Enter)\") \ndef displaycleardesg(e):\n    buttondes.config(text=\"Clear (ctrl+c)\")  \ndef displaytriedesg(e):",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "displaycreatdesg",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def displaycreatdesg(e):\n    buttondes.config(text=\"Create (Enter)\") \ndef displaycleardesg(e):\n    buttondes.config(text=\"Clear (ctrl+c)\")  \ndef displaytriedesg(e):\n    buttondes.config(text=\"Sort (Enter)\")       \ndef hidedesg(e):\n    buttondes.config(text=\"Add left box (ctrl+l) / Add right box (ctrl+r)\") \n#widgets created\ntypeoftrie=tk.Label(master=instractionfr,text=\"Choose the direction\",font = ('calibre',12,'bold')) ",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "displaycleardesg",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def displaycleardesg(e):\n    buttondes.config(text=\"Clear (ctrl+c)\")  \ndef displaytriedesg(e):\n    buttondes.config(text=\"Sort (Enter)\")       \ndef hidedesg(e):\n    buttondes.config(text=\"Add left box (ctrl+l) / Add right box (ctrl+r)\") \n#widgets created\ntypeoftrie=tk.Label(master=instractionfr,text=\"Choose the direction\",font = ('calibre',12,'bold')) \nasc = tk.Radiobutton(master=instractionfr, text='ASC',variable=radioValue,value=0,\nfont = ('calibre',10,'bold'),cursor=\"hand2\") ",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "displaytriedesg",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def displaytriedesg(e):\n    buttondes.config(text=\"Sort (Enter)\")       \ndef hidedesg(e):\n    buttondes.config(text=\"Add left box (ctrl+l) / Add right box (ctrl+r)\") \n#widgets created\ntypeoftrie=tk.Label(master=instractionfr,text=\"Choose the direction\",font = ('calibre',12,'bold')) \nasc = tk.Radiobutton(master=instractionfr, text='ASC',variable=radioValue,value=0,\nfont = ('calibre',10,'bold'),cursor=\"hand2\") \ndesc = tk.Radiobutton(master=instractionfr, text='DESC',variable=radioValue, value=1,\nfont = ('calibre',10,'bold'),cursor=\"hand2\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "hidedesg",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def hidedesg(e):\n    buttondes.config(text=\"Add left box (ctrl+l) / Add right box (ctrl+r)\") \n#widgets created\ntypeoftrie=tk.Label(master=instractionfr,text=\"Choose the direction\",font = ('calibre',12,'bold')) \nasc = tk.Radiobutton(master=instractionfr, text='ASC',variable=radioValue,value=0,\nfont = ('calibre',10,'bold'),cursor=\"hand2\") \ndesc = tk.Radiobutton(master=instractionfr, text='DESC',variable=radioValue, value=1,\nfont = ('calibre',10,'bold'),cursor=\"hand2\")\ntypetext=tk.Label(master=instractionfr,text=\"Pick the type of sorting\",font = ('calibre',12,'bold')) \ntypelist = ttk.Combobox(master=instractionfr, values = trietypes,textvariable=typetrie,",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "window",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "window = tk.Tk()\n    #variables \nwindow.geometry('900x600+222+40')\nradioValue = tk.IntVar() \ntypetrie=tk.StringVar()\nvalue=tk.StringVar()\ntrietypes=[\"insertion\",\"bulle\"]\ninstractionfr=tk.Frame(master=window)\nbuttonfr=tk.Frame(master=window)\nsortimage=PhotoImage(file='Icons\\sort.png')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "radioValue",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "radioValue = tk.IntVar() \ntypetrie=tk.StringVar()\nvalue=tk.StringVar()\ntrietypes=[\"insertion\",\"bulle\"]\ninstractionfr=tk.Frame(master=window)\nbuttonfr=tk.Frame(master=window)\nsortimage=PhotoImage(file='Icons\\sort.png')\nclearimage=PhotoImage(file='Icons\\cancel.png')\ncreateimage=PhotoImage(file='Icons\\\\table.png')\ndeletenumberimage=PhotoImage(file='Icons\\deletenumber.png')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "frequency",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "frequency = 2000  # Set Frequency To 2500 Hertz\nduration = 200  # Set Duration To 1000 ms == 1 second\n#functions\n\"\"\"def gettype():\n    global nbrcase2\n    nbrcase2=tk.Label(text=typetrie.get()+\"  \"+str(radioValue.get())).pack(padx=5,pady=5)\ndef hideerrmsg():\n    errormsg.config(text=\"\")\"\"\"\ndef validatenumcase(S,P):\n    if S=='':",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "duration",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "duration = 200  # Set Duration To 1000 ms == 1 second\n#functions\n\"\"\"def gettype():\n    global nbrcase2\n    nbrcase2=tk.Label(text=typetrie.get()+\"  \"+str(radioValue.get())).pack(padx=5,pady=5)\ndef hideerrmsg():\n    errormsg.config(text=\"\")\"\"\"\ndef validatenumcase(S,P):\n    if S=='':\n        return True",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "asc",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "asc = tk.Radiobutton(master=instractionfr, text='ASC',variable=radioValue,value=0,\nfont = ('calibre',10,'bold'),cursor=\"hand2\") \ndesc = tk.Radiobutton(master=instractionfr, text='DESC',variable=radioValue, value=1,\nfont = ('calibre',10,'bold'),cursor=\"hand2\")\ntypetext=tk.Label(master=instractionfr,text=\"Pick the type of sorting\",font = ('calibre',12,'bold')) \ntypelist = ttk.Combobox(master=instractionfr, values = trietypes,textvariable=typetrie,\n                         font = ('calibre',10,'bold'),cursor=\"hand2\")\ntypelist.set(\"insertion\")\nvncmd = (tk.Label(master=instractionfr,text=\"Enter the length\").register(validatenumcase),'%P','%S')\nnbrtext=tk.Label(master=instractionfr,text=\"Enter the length\",font = ('calibre',12,'bold'))",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "font",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "font = ('calibre',10,'bold'),cursor=\"hand2\") \ndesc = tk.Radiobutton(master=instractionfr, text='DESC',variable=radioValue, value=1,\nfont = ('calibre',10,'bold'),cursor=\"hand2\")\ntypetext=tk.Label(master=instractionfr,text=\"Pick the type of sorting\",font = ('calibre',12,'bold')) \ntypelist = ttk.Combobox(master=instractionfr, values = trietypes,textvariable=typetrie,\n                         font = ('calibre',10,'bold'),cursor=\"hand2\")\ntypelist.set(\"insertion\")\nvncmd = (tk.Label(master=instractionfr,text=\"Enter the length\").register(validatenumcase),'%P','%S')\nnbrtext=tk.Label(master=instractionfr,text=\"Enter the length\",font = ('calibre',12,'bold'))\nnbrcase=tk.Entry(master=instractionfr,justify=CENTER,validate=\"key\",",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "desc",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "desc = tk.Radiobutton(master=instractionfr, text='DESC',variable=radioValue, value=1,\nfont = ('calibre',10,'bold'),cursor=\"hand2\")\ntypetext=tk.Label(master=instractionfr,text=\"Pick the type of sorting\",font = ('calibre',12,'bold')) \ntypelist = ttk.Combobox(master=instractionfr, values = trietypes,textvariable=typetrie,\n                         font = ('calibre',10,'bold'),cursor=\"hand2\")\ntypelist.set(\"insertion\")\nvncmd = (tk.Label(master=instractionfr,text=\"Enter the length\").register(validatenumcase),'%P','%S')\nnbrtext=tk.Label(master=instractionfr,text=\"Enter the length\",font = ('calibre',12,'bold'))\nnbrcase=tk.Entry(master=instractionfr,justify=CENTER,validate=\"key\",\n                  validatecommand=vncmd,font = ('calibre',12,'bold'))",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "font",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "font = ('calibre',10,'bold'),cursor=\"hand2\")\ntypetext=tk.Label(master=instractionfr,text=\"Pick the type of sorting\",font = ('calibre',12,'bold')) \ntypelist = ttk.Combobox(master=instractionfr, values = trietypes,textvariable=typetrie,\n                         font = ('calibre',10,'bold'),cursor=\"hand2\")\ntypelist.set(\"insertion\")\nvncmd = (tk.Label(master=instractionfr,text=\"Enter the length\").register(validatenumcase),'%P','%S')\nnbrtext=tk.Label(master=instractionfr,text=\"Enter the length\",font = ('calibre',12,'bold'))\nnbrcase=tk.Entry(master=instractionfr,justify=CENTER,validate=\"key\",\n                  validatecommand=vncmd,font = ('calibre',12,'bold'))\nnbrcase.focus_set()      ",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "typelist",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "typelist = ttk.Combobox(master=instractionfr, values = trietypes,textvariable=typetrie,\n                         font = ('calibre',10,'bold'),cursor=\"hand2\")\ntypelist.set(\"insertion\")\nvncmd = (tk.Label(master=instractionfr,text=\"Enter the length\").register(validatenumcase),'%P','%S')\nnbrtext=tk.Label(master=instractionfr,text=\"Enter the length\",font = ('calibre',12,'bold'))\nnbrcase=tk.Entry(master=instractionfr,justify=CENTER,validate=\"key\",\n                  validatecommand=vncmd,font = ('calibre',12,'bold'))\nnbrcase.focus_set()      \ncreat=tk.Button(master=buttonfr,image=createimage,command= lambda :creatlist(nbrcase.get()),\n                font = ('calibre',12,'bold') ,width=40,height=40,cursor=\"hand2\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "vncmd",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "vncmd = (tk.Label(master=instractionfr,text=\"Enter the length\").register(validatenumcase),'%P','%S')\nnbrtext=tk.Label(master=instractionfr,text=\"Enter the length\",font = ('calibre',12,'bold'))\nnbrcase=tk.Entry(master=instractionfr,justify=CENTER,validate=\"key\",\n                  validatecommand=vncmd,font = ('calibre',12,'bold'))\nnbrcase.focus_set()      \ncreat=tk.Button(master=buttonfr,image=createimage,command= lambda :creatlist(nbrcase.get()),\n                font = ('calibre',12,'bold') ,width=40,height=40,cursor=\"hand2\")\nclear=tk.Button(master=buttonfr,image=clearimage,command= lambda :clearlist(),state=DISABLED,\n               font = ('calibre',12,'bold'),width=40,height=40,cursor=\"arrow\")\ntrie=tk.Button(master=buttonfr,image=sortimage,command= lambda :trielist(),",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "state=DISABLED,font",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "state=DISABLED,font = ('calibre',12,'bold'),width=40,height=40,cursor=\"arrow\")\nerrormsg=tk.Label(master=instractionfr,text=\"\",fg=\"red\",font = ('calibre',12,'bold'))\nlimitexceeded=tk.Label(master=window,text=\"\",font = ('calibre',12,'bold'),fg=\"red\")\ndatatxt=tk.Label(master=datadesig,text=\"Fill the boxes:\",font = ('calibre',12,'bold'))\nbuttondes=tk.Label(window,text=\"\",bd=1,relief=SUNKEN,anchor=E)\n#tip.bind_widget(clear,balloonmsg=\"Creat (ctrl+c)\")\n\"\"\"#Create a tooltip\ntip= Balloon(window)\n#Create a Button widget\nmy_button=Button(window, text= \"Python\", font=('Helvetica bold', 20))",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "errormsg=tk.Label(master=instractionfr,text=\"\",fg=\"red\",font",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "errormsg=tk.Label(master=instractionfr,text=\"\",fg=\"red\",font = ('calibre',12,'bold'))\nlimitexceeded=tk.Label(master=window,text=\"\",font = ('calibre',12,'bold'),fg=\"red\")\ndatatxt=tk.Label(master=datadesig,text=\"Fill the boxes:\",font = ('calibre',12,'bold'))\nbuttondes=tk.Label(window,text=\"\",bd=1,relief=SUNKEN,anchor=E)\n#tip.bind_widget(clear,balloonmsg=\"Creat (ctrl+c)\")\n\"\"\"#Create a tooltip\ntip= Balloon(window)\n#Create a Button widget\nmy_button=Button(window, text= \"Python\", font=('Helvetica bold', 20))\nmy_button.pack(pady=20)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "limitexceeded=tk.Label(master=window,text=\"\",font",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "limitexceeded=tk.Label(master=window,text=\"\",font = ('calibre',12,'bold'),fg=\"red\")\ndatatxt=tk.Label(master=datadesig,text=\"Fill the boxes:\",font = ('calibre',12,'bold'))\nbuttondes=tk.Label(window,text=\"\",bd=1,relief=SUNKEN,anchor=E)\n#tip.bind_widget(clear,balloonmsg=\"Creat (ctrl+c)\")\n\"\"\"#Create a tooltip\ntip= Balloon(window)\n#Create a Button widget\nmy_button=Button(window, text= \"Python\", font=('Helvetica bold', 20))\nmy_button.pack(pady=20)\n#Bind the tooltip with button",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "bulle",
        "kind": 2,
        "importPath": "triAlgs",
        "description": "triAlgs",
        "peekOfCode": "def bulle(l):\n    n=len(l)\n    while 1:\n        permutation=False\n        for i in range(1,n):\n            if l[i]<l[i-1]:\n                l[i],l[i-1]=l[i-1],l[i]\n                permutation = True\n        if not permutation:\n            break",
        "detail": "triAlgs",
        "documentation": {}
    },
    {
        "label": "insertion",
        "kind": 2,
        "importPath": "triAlgs",
        "description": "triAlgs",
        "peekOfCode": "def insertion(l):\n    for i in range(len(l)):\n        x=l[i]\n        j=i\n        #décalage des éléments de la liste\n        while j>0 and l[j-1]>x:\n            l[j]=l[j-1]\n            j=j-1\n        #on insére l'élément à sa place\n        l[j]=x    ",
        "detail": "triAlgs",
        "documentation": {}
    },
    {
        "label": "posmin",
        "kind": 2,
        "importPath": "triAlgs",
        "description": "triAlgs",
        "peekOfCode": "def posmin(l):\n    p=0\n    for i in range(1,len(l)):\n        if l[i]<l[p]:\n            p=i\n    return p\ndef selection(l):\n    for i in range(len(l)):\n        p=posmin(l[i:])\n        l[i],l[p+i]=l[p+i],l[i]",
        "detail": "triAlgs",
        "documentation": {}
    },
    {
        "label": "selection",
        "kind": 2,
        "importPath": "triAlgs",
        "description": "triAlgs",
        "peekOfCode": "def selection(l):\n    for i in range(len(l)):\n        p=posmin(l[i:])\n        l[i],l[p+i]=l[p+i],l[i]\n\"\"\"def partquicksort(l):\n    start=0\n    end=len(l)-1\n    pivot=8\n    while start<end:\n        while l[start]<l[pivot]:",
        "detail": "triAlgs",
        "documentation": {}
    }
]